---
// LoginForm.astro
import Button from "./Button.astro";

interface Props {}
---

<form id="loginForm" class="space-y-6">
  <div>
    <label for="email" class="block text-sm font-medium text-gray-700"
      >Email</label
    >
    <div class="mt-1 relative rounded-md shadow-sm">
      <div
        class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 text-gray-400"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"
          ></path>
          <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"
          ></path>
        </svg>
      </div>
      <input
        type="email"
        id="email"
        name="email"
        placeholder="you@example.com"
        required
        class="pl-10 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
      />
    </div>
  </div>

  <div>
    <div class="flex justify-between items-center">
      <label for="password" class="block text-sm font-medium text-gray-700"
        >Password</label
      >
    </div>
    <div class="mt-1 relative rounded-md shadow-sm">
      <div
        class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 text-gray-400"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"
            clip-rule="evenodd"></path>
        </svg>
      </div>
      <input
        type="password"
        id="password"
        name="password"
        required
        class="pl-10 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
      />
    </div>
  </div>

  <div class="flex items-center">
    <input
      id="remember-me"
      name="remember-me"
      type="checkbox"
      class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
    />
    <label for="remember-me" class="ml-2 block text-sm text-gray-900"
      >Remember me</label
    >
  </div>

  <div
    id="errorMessage"
    class="text-red-500 text-sm hidden px-4 py-3 rounded-md bg-red-50"
  >
  </div>

  <Button type="submit" class="w-full" id="submitButton">Sign in</Button>
</form>

<script is:inline>
  // Only run this code in the browser
  if (typeof window !== "undefined") {
    const form = document.getElementById("loginForm");
    const errorMessage = document.getElementById("errorMessage");
    const submitButton = document.getElementById("submitButton");
    const emailInput = document.getElementById("email");
    const passwordInput = document.getElementById("password");
    const rememberMe = document.getElementById("remember-me");

    // Check if there's a saved email in local storage
    const savedEmail = localStorage.getItem("rememberedEmail");
    if (savedEmail && emailInput) {
      emailInput.value = savedEmail;
      if (rememberMe) rememberMe.checked = true;
    }

    const showError = (message) => {
      if (errorMessage) {
        errorMessage.textContent = message;
        errorMessage.classList.remove("hidden");
        // Shake animation effect on error
        errorMessage.animate(
          [
            { transform: "translateX(-5px)" },
            { transform: "translateX(5px)" },
            { transform: "translateX(-5px)" },
            { transform: "translateX(5px)" },
            { transform: "translateX(0)" },
          ],
          {
            duration: 400,
            easing: "ease-in-out",
          }
        );
      }
    };

    const clearError = () => {
      if (errorMessage) {
        errorMessage.classList.add("hidden");
      }
    };

    // Add input listeners to clear error on typing
    if (emailInput) {
      emailInput.addEventListener("input", clearError);
    }

    if (passwordInput) {
      passwordInput.addEventListener("input", clearError);
    }

    if (form && errorMessage && submitButton) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Clear previous errors
        clearError();

        // Validate inputs
        const formData = new FormData(e.target);
        const email = formData.get("email")?.toString().trim();
        const password = formData.get("password")?.toString().trim();
        const shouldRemember = formData.get("remember-me") === "on";

        if (!email) {
          showError("Please enter your email address");
          emailInput?.focus();
          return;
        }

        if (!password) {
          showError("Please enter your password");
          passwordInput?.focus();
          return;
        }

        // Simple email validation
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
          showError("Please enter a valid email address");
          emailInput?.focus();
          return;
        }

        // Disable button and show loading
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.innerHTML = `<svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg> Signing in...`;
        }

        try {
          const response = await fetch("http://localhost:3000/auth/login", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ email, password }),
          });

          const data = await response.json();

          if (response.ok) {
            // Remember email if user checked "Remember me"
            if (shouldRemember) {
              localStorage.setItem("rememberedEmail", email);
            } else {
              localStorage.removeItem("rememberedEmail");
            }

            // The server should set the HTTP-only cookie with the token
            // We don't need to manually store the token anymore

            // Success animation before redirect
            if (submitButton) {
              submitButton.innerHTML = `<svg class="h-5 w-5 mr-1 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg> Success!`;
            }

            // Short delay for better UX
            setTimeout(() => {
              // Redirect to dashboard
              window.location.href = "/dashboard";
            }, 500);
          } else {
            throw new Error(data.message || "Login failed");
          }
        } catch (error) {
          let errorMsg = "An unexpected error occurred";

          if (error instanceof Error) {
            errorMsg = error.message;

            // Map common errors to more user-friendly messages
            if (errorMsg.includes("401") || errorMsg.includes("Unauthorized")) {
              errorMsg = "Invalid email or password";
            } else if (
              errorMsg.includes("Network Error") ||
              error.message.includes("Failed to fetch")
            ) {
              errorMsg =
                "Unable to connect to the server. Please check your internet connection.";
            }
          }

          showError(errorMsg);

          if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = "Sign in";
          }
        }
      });
    }
  }
</script>
